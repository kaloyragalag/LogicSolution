<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogicSolution</name>
    </assembly>
    <members>
        <member name="M:LogicSolution.Controllers.AuthorizationController.Authenticate(LogicSolution.Model.UserModel)">
            <summary>
            Authenticate user
            </summary>
            <param name="userLogin">User details</param>
            <returns>Token</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.#ctor(LogicSolution.Services.ICodeWarsService)">
            <summary>
            All the logic solution in the CodeWars platform
            </summary>
            <param name="logger">Logger</param>
            <param name="codeWarsService">Repository</param>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.GetVowelCount(System.String)">
            <summary>
            Return the number (count) of vowels in the given string.The input string will only consist of lower case letters and/or spaces.
            </summary>
            <param name="str">Text</param>
            <returns>Vowel count</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.OpenOrSenior(System.Int32[][])">
            <summary>
            To be a senior, a member must be at least 55 years old and have a handicap greater than 7. Handicaps range from -2 to +26.
            </summary>
            <param name="data">List of pairs that consists of an integer for the person's age and an integer for the person's handicap</param>
            <returns>Whether the respective member is to be placed in the senior or open category</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.TwoToOneLongest(System.String,System.String)">
            <summary>
            Take 2 strings s1 and s2 including only letters from a to z. Return a new sorted string, containing distinct letters from s1 or s2.
            </summary>
            <param name="s1">String 1</param>
            <param name="s2">String 2</param>
            <returns>Sorted distinct string</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.BreakCamelCase(System.String)">
            <summary>
            The function will break up camel casing, using a space between words. Example: "camelCasing" => "camel Casing"
            </summary>
            <param name="camelCaseText">Camel Case Text</param>
            <returns>Camel Case Text separated by space</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.Anagrams(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            The function that will find all the anagrams of a word from a list. Example: anagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']) => ['aabb', 'bbaa']
            </summary>
            <param name="word">Main Word</param>
            <param name="words">List of Words</param>
            <returns>An array of all the anagrams or an empty array if there are none.</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.Rot13(System.String)">
            <summary>
            ROT13 is a simple letter substitution cipher that replaces a letter with the letter 13 letters after it in the alphabet.
            </summary>
            <param name="message">Message</param>
            <returns>The string ciphered with Rot13</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.IsPangram(System.String)">
            <summary>
            A pangram is a sentence that contains every single letter of the alphabet at least once.
            </summary>
            <param name="text">Text</param>
            <returns></returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.AlphabetPosition(System.String)">
            <summary>
            This function replaces every letter with its position in the alphabet. If anything in the text isn't a letter, ignore it and don't return it. "a" = 1, "b" = 2, etc.
            </summary>
            <param name="text">Text</param>
            <returns></returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.FindMissingLetter(System.Char[])">
            <summary>
            This function will find the missing letter in an array of characters. ["a","b","c","d","f"] => "e"
            </summary>
            <param name="array">Array of Characters</param>
            <returns>The missing letter in the array</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.RGBToHex(System.Int32,System.Int32,System.Int32)">
            <summary>
            The function will convert the RGB decimal value to hexadecimal value. Rgb(255, 255, 255) # returns FFFFFF
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <returns>RGB hexadecimal value</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.TicTacToeChecker(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            The function will check whether the board's current state is solved. 
            </summary>
            <param name="board">Tic-Tac-Toe Board</param>
            <returns>
            -1 if the board is not yet finished AND no one has won yet (there are empty spots),
            1 if "X" won,
            2 if "O" won,
            0 if it's a cat's game (i.e. a draw).
            </returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.PigLatin(System.String)">
            <summary>
            Move the first letter of each word to the end of it, then add "ay" to the end of the word.
            </summary>
            <param name="word">Word</param>
            <returns>Pig Latin Word</returns>
        </member>
        <member name="M:LogicSolution.Controllers.CodeWarsController.SudokuValidator(System.Int32[][])">
            <summary>
            Accepts a 2D array representing a Sudoku board, and returns whether it is valid or not. Boards containing one or more zeroes are considered to be invalid solution.
            </summary>
            <param name="board">2D board</param>
            <returns>True/False</returns>
        </member>
    </members>
</doc>
